table(y)
dataOTU<-read.delim("https://europepmc.org/articles/PMC5732161/bin/41598_2017_17795_MOESM2_ESM.txt",header=T)
testH <- strsplit(as.character(dataOTU$taxonomy), "__", fixed = FALSE)
genuslist <- NULL
for(i in 1:length(testH))  genuslist <- c(genuslist, testH[[i]][7])
uniquegenus <- unique(genuslist)
uniquegenus <- uniquegenus[uniquegenus != ";s"]
OTUmatrix <- NULL
for(i in 1:length(uniquegenus)) OTUmatrix <- cbind(OTUmatrix,
apply(dataOTU[which(genuslist == uniquegenus[i]) ,2:364], 2, sum))
colnames(OTUmatrix) <- uniquegenus
rownames(OTUmatrix) <- colnames(dataOTU)[2:364]
OTUmatrix <- as.matrix(OTUmatrix[ order(rownames(OTUmatrix)),])
OTUmatrix <- OTUmatrix[,!grepl("\\[",colnames(OTUmatrix) )]
OTUmatrix <- OTUmatrix[,apply(OTUmatrix != 0,2, mean) > 0.10]
data=OTUmatrix
y
grpA <- sample((1:dim(data)[1]), floor(dim(data)[1]/2)) ### Grp A: fitting lasso on these
grpB <- (1:dim(data)[1])[!((1:dim(data)[1]) %in% grpA)] ### Grp B: no lasso, just used to find c
datagrpA <- data[grpA,]
datagrpB <- data[grpB,]
ygrpB <-  1*y[grpB]
ygrpA <-  1*y[grpA]
pairsmatrixnames <-  NULL
for(i in 1:(dim(data)[2]-1)){
for(j in (i+1):dim(data)[2]){
pairsmatrixnames <- c(pairsmatrixnames, paste(colnames(data)[i], ".X.",colnames(data)[j], sep=""))
}
}
xtest <- getpairsOddXOut( datagrpB, datagrpA, ygrpB, choose(dim(datagrpB)[2],2))
colnames(xtest)  <- pairsmatrixnames
xtest <- getpairsOddXOut( datagrpB, datagrpA, ygrpB, choose(dim(datagrpB)[2],2))
colnames(xtest)  <- pairsmatrixnames
getpairsOddXOut
PairSeekBinary(y,OTUmatrix,LassoIterations=100)
PairSeekBinary<-function(y,  data,LassoIterations= 50)
{
####################################
#################################### first get distribution of lambda
grpA <- sample((1:dim(data)[1]), floor(dim(data)[1]/2)) ### Grp A: fitting lasso on these
grpB <- (1:dim(data)[1])[!((1:dim(data)[1]) %in% grpA)] ### Grp B: no lasso, just used to find c
datagrpA <- data[grpA,]
datagrpB <- data[grpB,]
ygrpB <-  1*y[grpB]
ygrpA <-  1*y[grpA]
pairsmatrixnames <-  NULL
for(i in 1:(dim(data)[2]-1)){
for(j in (i+1):dim(data)[2]){
pairsmatrixnames <- c(pairsmatrixnames, paste(colnames(data)[i], ".X.",colnames(data)[j], sep=""))
}
}
xtest <- getpairsOddXOut( datagrpB, datagrpA, ygrpB, choose(dim(datagrpB)[2],2))
colnames(xtest)  <- pairsmatrixnames
mod1 <- glmnet(xtest, ygrpA,family="binomial",  alpha = 1)
lambdaforC2 <- mod1$lambda
retmatrix <-  NULL
cat("Percent computed: ")
for(simsim in 1:LassoIterations){
if (simsim %in% round(c(1:10)*LassoIterations/10)) cat(paste(round(100*simsim/LassoIterations),".. ",sep=""))
grpA <- sample((1:dim(data)[1]), floor(dim(data)[1]/2)) ### Grp A: fitting lasso on these
grpB <- (1:dim(data)[1])[!((1:dim(data)[1]) %in% grpA)] ### Grp B: no lasso, just used to find c
datagrpA <- data[grpA,]
datagrpB <- data[grpB,]
ygrpB <-  1*y[grpB]
ygrpA <-  1*y[grpA]
xtest <- getpairsOddXOut( datagrpB, datagrpA, ygrpB, choose(dim(datagrpB)[2],2))
colnames(xtest)  <- pairsmatrixnames
mod1 <- glmnet(xtest, ygrpA,family="binomial",  alpha = 1)
selected <- predict(mod1, type = "nonzero", s= sample(lambdaforC2,1))
selected <- selected[[length(selected)]]
ret <- logical(ncol(xtest))
ret[selected] <- TRUE
names(ret) <- colnames(xtest)
retmatrix  <- rbind(retmatrix, ret)
}
return( apply(retmatrix != 0, 2, mean))
}
PairSeekBinary(y,OTUmatrix,LassoIterations=100)
PairSeekBinary<-function(y,  data,LassoIterations= 50)
{
####################################
#################################### first get distribution of lambda
sourceCpp("newpairingOddXoutEntropy.cpp")
grpA <- sample((1:dim(data)[1]), floor(dim(data)[1]/2)) ### Grp A: fitting lasso on these
grpB <- (1:dim(data)[1])[!((1:dim(data)[1]) %in% grpA)] ### Grp B: no lasso, just used to find c
datagrpA <- data[grpA,]
datagrpB <- data[grpB,]
ygrpB <-  1*y[grpB]
ygrpA <-  1*y[grpA]
pairsmatrixnames <-  NULL
for(i in 1:(dim(data)[2]-1)){
for(j in (i+1):dim(data)[2]){
pairsmatrixnames <- c(pairsmatrixnames, paste(colnames(data)[i], ".X.",colnames(data)[j], sep=""))
}
}
xtest <- getpairsOddXOut( datagrpB, datagrpA, ygrpB, choose(dim(datagrpB)[2],2))
colnames(xtest)  <- pairsmatrixnames
mod1 <- glmnet(xtest, ygrpA,family="binomial",  alpha = 1)
lambdaforC2 <- mod1$lambda
retmatrix <-  NULL
cat("Percent computed: ")
for(simsim in 1:LassoIterations){
if (simsim %in% round(c(1:10)*LassoIterations/10)) cat(paste(round(100*simsim/LassoIterations),".. ",sep=""))
grpA <- sample((1:dim(data)[1]), floor(dim(data)[1]/2)) ### Grp A: fitting lasso on these
grpB <- (1:dim(data)[1])[!((1:dim(data)[1]) %in% grpA)] ### Grp B: no lasso, just used to find c
datagrpA <- data[grpA,]
datagrpB <- data[grpB,]
ygrpB <-  1*y[grpB]
ygrpA <-  1*y[grpA]
xtest <- getpairsOddXOut( datagrpB, datagrpA, ygrpB, choose(dim(datagrpB)[2],2))
colnames(xtest)  <- pairsmatrixnames
mod1 <- glmnet(xtest, ygrpA,family="binomial",  alpha = 1)
selected <- predict(mod1, type = "nonzero", s= sample(lambdaforC2,1))
selected <- selected[[length(selected)]]
ret <- logical(ncol(xtest))
ret[selected] <- TRUE
names(ret) <- colnames(xtest)
retmatrix  <- rbind(retmatrix, ret)
}
return( apply(retmatrix != 0, 2, mean))
}
PairSeekBinary(y,OTUmatrix,LassoIterations=100)
PairSeekBinary<-function(y,  data,LassoIterations= 50)
{library(Rcpp)
library(glmnet)
####################################
#################################### first get distribution of lambda
sourceCpp("newpairingOddXoutEntropy.cpp")
grpA <- sample((1:dim(data)[1]), floor(dim(data)[1]/2)) ### Grp A: fitting lasso on these
grpB <- (1:dim(data)[1])[!((1:dim(data)[1]) %in% grpA)] ### Grp B: no lasso, just used to find c
datagrpA <- data[grpA,]
datagrpB <- data[grpB,]
ygrpB <-  1*y[grpB]
ygrpA <-  1*y[grpA]
pairsmatrixnames <-  NULL
for(i in 1:(dim(data)[2]-1)){
for(j in (i+1):dim(data)[2]){
pairsmatrixnames <- c(pairsmatrixnames, paste(colnames(data)[i], ".X.",colnames(data)[j], sep=""))
}
}
xtest <- getpairsOddXOut( datagrpB, datagrpA, ygrpB, choose(dim(datagrpB)[2],2))
colnames(xtest)  <- pairsmatrixnames
mod1 <- glmnet(xtest, ygrpA,family="binomial",  alpha = 1)
lambdaforC2 <- mod1$lambda
retmatrix <-  NULL
cat("Percent computed: ")
for(simsim in 1:LassoIterations){
if (simsim %in% round(c(1:10)*LassoIterations/10)) cat(paste(round(100*simsim/LassoIterations),".. ",sep=""))
grpA <- sample((1:dim(data)[1]), floor(dim(data)[1]/2)) ### Grp A: fitting lasso on these
grpB <- (1:dim(data)[1])[!((1:dim(data)[1]) %in% grpA)] ### Grp B: no lasso, just used to find c
datagrpA <- data[grpA,]
datagrpB <- data[grpB,]
ygrpB <-  1*y[grpB]
ygrpA <-  1*y[grpA]
xtest <- getpairsOddXOut( datagrpB, datagrpA, ygrpB, choose(dim(datagrpB)[2],2))
colnames(xtest)  <- pairsmatrixnames
mod1 <- glmnet(xtest, ygrpA,family="binomial",  alpha = 1)
selected <- predict(mod1, type = "nonzero", s= sample(lambdaforC2,1))
selected <- selected[[length(selected)]]
ret <- logical(ncol(xtest))
ret[selected] <- TRUE
names(ret) <- colnames(xtest)
retmatrix  <- rbind(retmatrix, ret)
}
return( apply(retmatrix != 0, 2, mean))
}
PairSeekBinary(y,OTUmatrix,LassoIterations=100)
PairSeekBinary<-function(y,  data,LassoIterations= 50)
{library(Rcpp)
library(glmnet)
####################################
#################################### first get distribution of lambda
sourceCpp("R/newpairingOddXoutEntropy.cpp")
grpA <- sample((1:dim(data)[1]), floor(dim(data)[1]/2)) ### Grp A: fitting lasso on these
grpB <- (1:dim(data)[1])[!((1:dim(data)[1]) %in% grpA)] ### Grp B: no lasso, just used to find c
datagrpA <- data[grpA,]
datagrpB <- data[grpB,]
ygrpB <-  1*y[grpB]
ygrpA <-  1*y[grpA]
pairsmatrixnames <-  NULL
for(i in 1:(dim(data)[2]-1)){
for(j in (i+1):dim(data)[2]){
pairsmatrixnames <- c(pairsmatrixnames, paste(colnames(data)[i], ".X.",colnames(data)[j], sep=""))
}
}
xtest <- getpairsOddXOut( datagrpB, datagrpA, ygrpB, choose(dim(datagrpB)[2],2))
colnames(xtest)  <- pairsmatrixnames
mod1 <- glmnet(xtest, ygrpA,family="binomial",  alpha = 1)
lambdaforC2 <- mod1$lambda
retmatrix <-  NULL
cat("Percent computed: ")
for(simsim in 1:LassoIterations){
if (simsim %in% round(c(1:10)*LassoIterations/10)) cat(paste(round(100*simsim/LassoIterations),".. ",sep=""))
grpA <- sample((1:dim(data)[1]), floor(dim(data)[1]/2)) ### Grp A: fitting lasso on these
grpB <- (1:dim(data)[1])[!((1:dim(data)[1]) %in% grpA)] ### Grp B: no lasso, just used to find c
datagrpA <- data[grpA,]
datagrpB <- data[grpB,]
ygrpB <-  1*y[grpB]
ygrpA <-  1*y[grpA]
xtest <- getpairsOddXOut( datagrpB, datagrpA, ygrpB, choose(dim(datagrpB)[2],2))
colnames(xtest)  <- pairsmatrixnames
mod1 <- glmnet(xtest, ygrpA,family="binomial",  alpha = 1)
selected <- predict(mod1, type = "nonzero", s= sample(lambdaforC2,1))
selected <- selected[[length(selected)]]
ret <- logical(ncol(xtest))
ret[selected] <- TRUE
names(ret) <- colnames(xtest)
retmatrix  <- rbind(retmatrix, ret)
}
return( apply(retmatrix != 0, 2, mean))
}
PairSeekBinary(y,OTUmatrix,LassoIterations=100)
dom.scores<-PairSeekBinary(y,OTUmatrix,LassoIterations=100)
dom.scores
sort(dom.scores[1:5])
sort(dom.scores[1:5],decreasing=T)
dim(OTUmatrix)
dom.scores<-PairSeekBinary(y,OTUmatrix,LassoIterations=100)
PairSeekBinary<-function(y,  data,LassoIterations= 50)
{library(Rcpp)
library(glmnet)
####################################
#################################### first get distribution of lambda
sourceCpp("newpairingOddXoutEntropy.cpp")
grpA <- sample((1:dim(data)[1]), floor(dim(data)[1]/2)) ### Grp A: fitting lasso on these
grpB <- (1:dim(data)[1])[!((1:dim(data)[1]) %in% grpA)] ### Grp B: no lasso, just used to find c
datagrpA <- data[grpA,]
datagrpB <- data[grpB,]
ygrpB <-  1*y[grpB]
ygrpA <-  1*y[grpA]
pairsmatrixnames <-  NULL
for(i in 1:(dim(data)[2]-1)){
for(j in (i+1):dim(data)[2]){
pairsmatrixnames <- c(pairsmatrixnames, paste(colnames(data)[i], ".X.",colnames(data)[j], sep=""))
}
}
xtest <-getpairsOddXOut(datagrpB, datagrpA, ygrpB, choose(dim(datagrpB)[2],2))
colnames(xtest)  <- pairsmatrixnames
mod1 <- glmnet(xtest, ygrpA,family="binomial",  alpha = 1)
lambdaforC2 <- mod1$lambda
retmatrix <-  NULL
cat("Percent computed: ")
for(simsim in 1:LassoIterations){
if (simsim %in% round(c(1:10)*LassoIterations/10)) cat(paste(round(100*simsim/LassoIterations),".. ",sep=""))
grpA <- sample((1:dim(data)[1]), floor(dim(data)[1]/2)) ### Grp A: fitting lasso on these
grpB <- (1:dim(data)[1])[!((1:dim(data)[1]) %in% grpA)] ### Grp B: no lasso, just used to find c
datagrpA <- data[grpA,]
datagrpB <- data[grpB,]
ygrpB <-  1*y[grpB]
ygrpA <-  1*y[grpA]
xtest <- getpairsOddXOut( datagrpB, datagrpA, ygrpB, choose(dim(datagrpB)[2],2))
colnames(xtest)  <- pairsmatrixnames
mod1 <- glmnet(xtest, ygrpA,family="binomial",  alpha = 1)
selected <- predict(mod1, type = "nonzero", s= sample(lambdaforC2,1))
selected <- selected[[length(selected)]]
ret <- logical(ncol(xtest))
ret[selected] <- TRUE
names(ret) <- colnames(xtest)
retmatrix  <- rbind(retmatrix, ret)
}
return( apply(retmatrix != 0, 2, mean))
}
dom.scores<-PairSeekBinary(y,OTUmatrix,LassoIterations=100)
PairSeekBinary<-function(y,  data,LassoIterations= 50)
{library(Rcpp)
library(glmnet)
####################################
#################################### first get distribution of lambda
sourceCpp("erc/newpairingOddXoutEntropy.cpp")
grpA <- sample((1:dim(data)[1]), floor(dim(data)[1]/2)) ### Grp A: fitting lasso on these
grpB <- (1:dim(data)[1])[!((1:dim(data)[1]) %in% grpA)] ### Grp B: no lasso, just used to find c
datagrpA <- data[grpA,]
datagrpB <- data[grpB,]
ygrpB <-  1*y[grpB]
ygrpA <-  1*y[grpA]
pairsmatrixnames <-  NULL
for(i in 1:(dim(data)[2]-1)){
for(j in (i+1):dim(data)[2]){
pairsmatrixnames <- c(pairsmatrixnames, paste(colnames(data)[i], ".X.",colnames(data)[j], sep=""))
}
}
xtest <-getpairsOddXOut(datagrpB, datagrpA, ygrpB, choose(dim(datagrpB)[2],2))
colnames(xtest)  <- pairsmatrixnames
mod1 <- glmnet(xtest, ygrpA,family="binomial",  alpha = 1)
lambdaforC2 <- mod1$lambda
retmatrix <-  NULL
cat("Percent computed: ")
for(simsim in 1:LassoIterations){
if (simsim %in% round(c(1:10)*LassoIterations/10)) cat(paste(round(100*simsim/LassoIterations),".. ",sep=""))
grpA <- sample((1:dim(data)[1]), floor(dim(data)[1]/2)) ### Grp A: fitting lasso on these
grpB <- (1:dim(data)[1])[!((1:dim(data)[1]) %in% grpA)] ### Grp B: no lasso, just used to find c
datagrpA <- data[grpA,]
datagrpB <- data[grpB,]
ygrpB <-  1*y[grpB]
ygrpA <-  1*y[grpA]
xtest <- getpairsOddXOut( datagrpB, datagrpA, ygrpB, choose(dim(datagrpB)[2],2))
colnames(xtest)  <- pairsmatrixnames
mod1 <- glmnet(xtest, ygrpA,family="binomial",  alpha = 1)
selected <- predict(mod1, type = "nonzero", s= sample(lambdaforC2,1))
selected <- selected[[length(selected)]]
ret <- logical(ncol(xtest))
ret[selected] <- TRUE
names(ret) <- colnames(xtest)
retmatrix  <- rbind(retmatrix, ret)
}
return( apply(retmatrix != 0, 2, mean))
}
dom.scores<-PairSeekBinary(y,OTUmatrix,LassoIterations=100)
PairSeekBinary<-function(y,  data,LassoIterations= 50)
{library(Rcpp)
library(glmnet)
####################################
#################################### first get distribution of lambda
sourceCpp("src/newpairingOddXoutEntropy.cpp")
grpA <- sample((1:dim(data)[1]), floor(dim(data)[1]/2)) ### Grp A: fitting lasso on these
grpB <- (1:dim(data)[1])[!((1:dim(data)[1]) %in% grpA)] ### Grp B: no lasso, just used to find c
datagrpA <- data[grpA,]
datagrpB <- data[grpB,]
ygrpB <-  1*y[grpB]
ygrpA <-  1*y[grpA]
pairsmatrixnames <-  NULL
for(i in 1:(dim(data)[2]-1)){
for(j in (i+1):dim(data)[2]){
pairsmatrixnames <- c(pairsmatrixnames, paste(colnames(data)[i], ".X.",colnames(data)[j], sep=""))
}
}
xtest <-getpairsOddXOut(datagrpB, datagrpA, ygrpB, choose(dim(datagrpB)[2],2))
colnames(xtest)  <- pairsmatrixnames
mod1 <- glmnet(xtest, ygrpA,family="binomial",  alpha = 1)
lambdaforC2 <- mod1$lambda
retmatrix <-  NULL
cat("Percent computed: ")
for(simsim in 1:LassoIterations){
if (simsim %in% round(c(1:10)*LassoIterations/10)) cat(paste(round(100*simsim/LassoIterations),".. ",sep=""))
grpA <- sample((1:dim(data)[1]), floor(dim(data)[1]/2)) ### Grp A: fitting lasso on these
grpB <- (1:dim(data)[1])[!((1:dim(data)[1]) %in% grpA)] ### Grp B: no lasso, just used to find c
datagrpA <- data[grpA,]
datagrpB <- data[grpB,]
ygrpB <-  1*y[grpB]
ygrpA <-  1*y[grpA]
xtest <- getpairsOddXOut( datagrpB, datagrpA, ygrpB, choose(dim(datagrpB)[2],2))
colnames(xtest)  <- pairsmatrixnames
mod1 <- glmnet(xtest, ygrpA,family="binomial",  alpha = 1)
selected <- predict(mod1, type = "nonzero", s= sample(lambdaforC2,1))
selected <- selected[[length(selected)]]
ret <- logical(ncol(xtest))
ret[selected] <- TRUE
names(ret) <- colnames(xtest)
retmatrix  <- rbind(retmatrix, ret)
}
return( apply(retmatrix != 0, 2, mean))
}
dom.scores<-PairSeekBinary(y,OTUmatrix,LassoIterations=100)
PairSeekBinary<-function(y,  data,LassoIterations= 50)
{library(Rcpp)
library(glmnet)
####################################
#################################### first get distribution of lambda
sourceCpp("newpairingOddXoutEntropy.cpp")
grpA <- sample((1:dim(data)[1]), floor(dim(data)[1]/2)) ### Grp A: fitting lasso on these
grpB <- (1:dim(data)[1])[!((1:dim(data)[1]) %in% grpA)] ### Grp B: no lasso, just used to find c
datagrpA <- data[grpA,]
datagrpB <- data[grpB,]
ygrpB <-  1*y[grpB]
ygrpA <-  1*y[grpA]
pairsmatrixnames <-  NULL
for(i in 1:(dim(data)[2]-1)){
for(j in (i+1):dim(data)[2]){
pairsmatrixnames <- c(pairsmatrixnames, paste(colnames(data)[i], ".X.",colnames(data)[j], sep=""))
}
}
xtest <-getpairsOddXOut(datagrpB, datagrpA, ygrpB, choose(dim(datagrpB)[2],2))
colnames(xtest)  <- pairsmatrixnames
mod1 <- glmnet(xtest, ygrpA,family="binomial",  alpha = 1)
lambdaforC2 <- mod1$lambda
retmatrix <-  NULL
cat("Percent computed: ")
for(simsim in 1:LassoIterations){
if (simsim %in% round(c(1:10)*LassoIterations/10)) cat(paste(round(100*simsim/LassoIterations),".. ",sep=""))
grpA <- sample((1:dim(data)[1]), floor(dim(data)[1]/2)) ### Grp A: fitting lasso on these
grpB <- (1:dim(data)[1])[!((1:dim(data)[1]) %in% grpA)] ### Grp B: no lasso, just used to find c
datagrpA <- data[grpA,]
datagrpB <- data[grpB,]
ygrpB <-  1*y[grpB]
ygrpA <-  1*y[grpA]
xtest <- getpairsOddXOut( datagrpB, datagrpA, ygrpB, choose(dim(datagrpB)[2],2))
colnames(xtest)  <- pairsmatrixnames
mod1 <- glmnet(xtest, ygrpA,family="binomial",  alpha = 1)
selected <- predict(mod1, type = "nonzero", s= sample(lambdaforC2,1))
selected <- selected[[length(selected)]]
ret <- logical(ncol(xtest))
ret[selected] <- TRUE
names(ret) <- colnames(xtest)
retmatrix  <- rbind(retmatrix, ret)
}
return( apply(retmatrix != 0, 2, mean))
}
dom.scores<-PairSeekBinary(y,OTUmatrix,LassoIterations=100)
PairSeekBinary<-function(y,  data,LassoIterations= 50)
{library(Rcpp)
library(glmnet)
####################################
#################################### first get distribution of lambda
sourceCpp("R/newpairingOddXoutEntropy.cpp")
grpA <- sample((1:dim(data)[1]), floor(dim(data)[1]/2)) ### Grp A: fitting lasso on these
grpB <- (1:dim(data)[1])[!((1:dim(data)[1]) %in% grpA)] ### Grp B: no lasso, just used to find c
datagrpA <- data[grpA,]
datagrpB <- data[grpB,]
ygrpB <-  1*y[grpB]
ygrpA <-  1*y[grpA]
pairsmatrixnames <-  NULL
for(i in 1:(dim(data)[2]-1)){
for(j in (i+1):dim(data)[2]){
pairsmatrixnames <- c(pairsmatrixnames, paste(colnames(data)[i], ".X.",colnames(data)[j], sep=""))
}
}
xtest <-getpairsOddXOut(datagrpB, datagrpA, ygrpB, choose(dim(datagrpB)[2],2))
colnames(xtest)  <- pairsmatrixnames
mod1 <- glmnet(xtest, ygrpA,family="binomial",  alpha = 1)
lambdaforC2 <- mod1$lambda
retmatrix <-  NULL
cat("Percent computed: ")
for(simsim in 1:LassoIterations){
if (simsim %in% round(c(1:10)*LassoIterations/10)) cat(paste(round(100*simsim/LassoIterations),".. ",sep=""))
grpA <- sample((1:dim(data)[1]), floor(dim(data)[1]/2)) ### Grp A: fitting lasso on these
grpB <- (1:dim(data)[1])[!((1:dim(data)[1]) %in% grpA)] ### Grp B: no lasso, just used to find c
datagrpA <- data[grpA,]
datagrpB <- data[grpB,]
ygrpB <-  1*y[grpB]
ygrpA <-  1*y[grpA]
xtest <- getpairsOddXOut( datagrpB, datagrpA, ygrpB, choose(dim(datagrpB)[2],2))
colnames(xtest)  <- pairsmatrixnames
mod1 <- glmnet(xtest, ygrpA,family="binomial",  alpha = 1)
selected <- predict(mod1, type = "nonzero", s= sample(lambdaforC2,1))
selected <- selected[[length(selected)]]
ret <- logical(ncol(xtest))
ret[selected] <- TRUE
names(ret) <- colnames(xtest)
retmatrix  <- rbind(retmatrix, ret)
}
return( apply(retmatrix != 0, 2, mean))
}
dom.scores<-PairSeekBinary(y,OTUmatrix,LassoIterations=100)
sort(dom.scores[1:5],decreasing=T)
dataClinical <- read.delim("https://europepmc.org/articles/PMC5732161/bin/41598_2017_17795_MOESM4_ESM.txt",header=T)
y <-   dataClinical$casectrl
table(y)
dataOTU<-read.delim("https://europepmc.org/articles/PMC5732161/bin/41598_2017_17795_MOESM2_ESM.txt",header=T)
testH <- strsplit(as.character(dataOTU$taxonomy), "__", fixed = FALSE)
genuslist <- NULL
for(i in 1:length(testH))  genuslist <- c(genuslist, testH[[i]][7])
uniquegenus <- unique(genuslist)
uniquegenus <- uniquegenus[uniquegenus != ";s"]
OTUmatrix <- NULL
for(i in 1:length(uniquegenus)) OTUmatrix <- cbind(OTUmatrix,
apply(dataOTU[which(genuslist == uniquegenus[i]) ,2:364], 2, sum))
colnames(OTUmatrix) <- uniquegenus
rownames(OTUmatrix) <- colnames(dataOTU)[2:364]
OTUmatrix <- as.matrix(OTUmatrix[ order(rownames(OTUmatrix)),])
OTUmatrix <- OTUmatrix[,!grepl("\\[",colnames(OTUmatrix) )]
OTUmatrix <- OTUmatrix[,apply(OTUmatrix != 0,2, mean) > 0.10]
dim(OTUmatrix)
table(y)
table(rownames(OTUmatrix)  == dataClinical[,1])
set.seed(100)
dom.scores<-PairSeekBinary(y,OTUmatrix,LassoIterations=100)
PairSeekBinary<-function(y,  data,LassoIterations= 50)
{library(Rcpp)
library(glmnet)
####################################
#################################### first get distribution of lambda
sourceCpp("R/newpairingOddXoutEntropy.cpp")
grpA <- sample((1:dim(data)[1]), floor(dim(data)[1]/2)) ### Grp A: fitting lasso on these
grpB <- (1:dim(data)[1])[!((1:dim(data)[1]) %in% grpA)] ### Grp B: no lasso, just used to find c
datagrpA <- data[grpA,]
datagrpB <- data[grpB,]
ygrpB <-  1*y[grpB]
ygrpA <-  1*y[grpA]
pairsmatrixnames <-  NULL
for(i in 1:(dim(data)[2]-1)){
for(j in (i+1):dim(data)[2]){
pairsmatrixnames <- c(pairsmatrixnames, paste(colnames(data)[i], ".X.",colnames(data)[j], sep=""))
}
}
xtest <-getpairsOddXOut(datagrpB, datagrpA, ygrpB, choose(dim(datagrpB)[2],2))
colnames(xtest)  <- pairsmatrixnames
mod1 <- glmnet(xtest, ygrpA,family="binomial",  alpha = 1)
lambdaforC2 <- mod1$lambda
retmatrix <-  NULL
cat("Percent computed: ")
for(simsim in 1:LassoIterations){
if (simsim %in% round(c(1:10)*LassoIterations/10)) cat(paste(round(100*simsim/LassoIterations),".. ",sep=""))
grpA <- sample((1:dim(data)[1]), floor(dim(data)[1]/2)) ### Grp A: fitting lasso on these
grpB <- (1:dim(data)[1])[!((1:dim(data)[1]) %in% grpA)] ### Grp B: no lasso, just used to find c
datagrpA <- data[grpA,]
datagrpB <- data[grpB,]
ygrpB <-  1*y[grpB]
ygrpA <-  1*y[grpA]
xtest <- getpairsOddXOut( datagrpB, datagrpA, ygrpB, choose(dim(datagrpB)[2],2))
colnames(xtest)  <- pairsmatrixnames
mod1 <- glmnet(xtest, ygrpA,family="binomial",  alpha = 1)
selected <- predict(mod1, type = "nonzero", s= sample(lambdaforC2,1))
selected <- selected[[length(selected)]]
ret <- logical(ncol(xtest))
ret[selected] <- TRUE
names(ret) <- colnames(xtest)
retmatrix  <- rbind(retmatrix, ret)
}
return( apply(retmatrix != 0, 2, mean))
}
set.seed(100)
dom.scores<-PairSeekBinary(y,OTUmatrix,LassoIterations=100)
